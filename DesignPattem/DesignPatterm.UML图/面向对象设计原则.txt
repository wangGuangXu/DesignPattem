
设计模式很好的资料：
	http://blog.csdn.net/lovelion/article/details/17517213
	http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html
	http://www.cnblogs.com/Terrylee/archive/2006/07/17/334911.html

	http://www.cnblogs.com/beijiguangyong/archive/2010/11/15/2302807.html

如果编写程序的时候考虑的都是如何针对抽象编程而不是针对细节编程,即程序中所有的依赖关系都是终止于抽象类或接口,
那就是面向对象的设计,反正就是过程化的设计。



1. 单一职责原则	:就一个类而言，应该仅有一个引起它变化的原因。

	A.软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。


2. 开放-封闭原则 :对于扩展是开放的，对于更改是封闭的。

	A.面对需求,对程序的改动是通过增加新代码,而不是修改现有的代码。
	B.此原则是面向对象设计的核心所在

3. 依赖倒置原则	:抽象不应该依赖于细节,细节应该依赖于抽象。

	A.高层模块不应该依赖于低层模块,两个都应该依赖于抽象。
	B.抽象不应该依赖于细节,细节应该依赖于抽象。
	C.面向对象的标志

4. 里氏替换原则	:子类必须能够替换掉它们的父类型

	A.只有当子类可以替换掉父类,软件单位的功能不受任何影响时,父类才能真正被复用,
	而子类也能够在父类的基础上增加新的行为。
	B.由于子类的可替换性才使得父类类型的模块在无需修改的情况下就可以扩展。
5. 